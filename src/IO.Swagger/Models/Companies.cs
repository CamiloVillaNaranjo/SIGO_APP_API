/*
 * Carvajal Sigo-Facturizate
 *
 * Este es un ejemplo de como luciría la Api de Integración entre Facturizate y SIGO.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Companies :  IEquatable<Companies>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Companies" /> class.
        /// </summary>
        /// <param name="CompanyId">Internal Id for the company.</param>
        /// <param name="FiscalNumber">References to RFC or RUT or NIT or in general to the fiscal number or identifier, used in each country..</param>
        /// <param name="SocialName">Social name for the company.</param>
        /// <param name="ContactName">Contact name for the company..</param>
        /// <param name="Email">email address.</param>
        /// <param name="EanCode">EanCode.</param>
        /// <param name="Address">Address.</param>
        /// <param name="RolPlayed">RolPlayed.</param>
        /// <param name="CityLocation">CityLocation.</param>
        public Companies(long? CompanyId = null, string FiscalNumber = null, string SocialName = null, string ContactName = null, string Email = null, string EanCode = null, string Address = null, Roles RolPlayed = null, Cities CityLocation = null)
        {
            this.CompanyId = CompanyId;
            this.FiscalNumber = FiscalNumber;
            this.SocialName = SocialName;
            this.ContactName = ContactName;
            this.Email = Email;
            this.EanCode = EanCode;
            this.Address = Address;
            this.RolPlayed = RolPlayed;
            this.CityLocation = CityLocation;
            
        }

        /// <summary>
        /// Internal Id for the company
        /// </summary>
        /// <value>Internal Id for the company</value>
        [DataMember(Name="companyId")]
        public long? CompanyId { get; set; }

        /// <summary>
        /// References to RFC or RUT or NIT or in general to the fiscal number or identifier, used in each country.
        /// </summary>
        /// <value>References to RFC or RUT or NIT or in general to the fiscal number or identifier, used in each country.</value>
        [DataMember(Name="fiscalNumber")]
        public string FiscalNumber { get; set; }

        /// <summary>
        /// Social name for the company
        /// </summary>
        /// <value>Social name for the company</value>
        [DataMember(Name="socialName")]
        public string SocialName { get; set; }

        /// <summary>
        /// Contact name for the company.
        /// </summary>
        /// <value>Contact name for the company.</value>
        [DataMember(Name="contactName")]
        public string ContactName { get; set; }

        /// <summary>
        /// email address
        /// </summary>
        /// <value>email address</value>
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets EanCode
        /// </summary>
        [DataMember(Name="eanCode")]
        public string EanCode { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets RolPlayed
        /// </summary>
        [DataMember(Name="rolPlayed")]
        public Roles RolPlayed { get; set; }

        /// <summary>
        /// Gets or Sets CityLocation
        /// </summary>
        [DataMember(Name="cityLocation")]
        public Cities CityLocation { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Companies {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  FiscalNumber: ").Append(FiscalNumber).Append("\n");
            sb.Append("  SocialName: ").Append(SocialName).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EanCode: ").Append(EanCode).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  RolPlayed: ").Append(RolPlayed).Append("\n");
            sb.Append("  CityLocation: ").Append(CityLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Companies)obj);
        }

        /// <summary>
        /// Returns true if Companies instances are equal
        /// </summary>
        /// <param name="other">Instance of Companies to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Companies other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.FiscalNumber == other.FiscalNumber ||
                    this.FiscalNumber != null &&
                    this.FiscalNumber.Equals(other.FiscalNumber)
                ) && 
                (
                    this.SocialName == other.SocialName ||
                    this.SocialName != null &&
                    this.SocialName.Equals(other.SocialName)
                ) && 
                (
                    this.ContactName == other.ContactName ||
                    this.ContactName != null &&
                    this.ContactName.Equals(other.ContactName)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.EanCode == other.EanCode ||
                    this.EanCode != null &&
                    this.EanCode.Equals(other.EanCode)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.RolPlayed == other.RolPlayed ||
                    this.RolPlayed != null &&
                    this.RolPlayed.Equals(other.RolPlayed)
                ) && 
                (
                    this.CityLocation == other.CityLocation ||
                    this.CityLocation != null &&
                    this.CityLocation.Equals(other.CityLocation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.FiscalNumber != null)
                    hash = hash * 59 + this.FiscalNumber.GetHashCode();
                if (this.SocialName != null)
                    hash = hash * 59 + this.SocialName.GetHashCode();
                if (this.ContactName != null)
                    hash = hash * 59 + this.ContactName.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.EanCode != null)
                    hash = hash * 59 + this.EanCode.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.RolPlayed != null)
                    hash = hash * 59 + this.RolPlayed.GetHashCode();
                if (this.CityLocation != null)
                    hash = hash * 59 + this.CityLocation.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Companies left, Companies right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Companies left, Companies right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
