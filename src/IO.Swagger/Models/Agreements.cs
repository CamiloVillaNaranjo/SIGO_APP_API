/*
 * Carvajal Sigo-Facturizate
 *
 * Este es un ejemplo de como luciría la Api de Integración entre Facturizate y SIGO.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Agreements :  IEquatable<Agreements>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Agreements" /> class.
        /// </summary>
        /// <param name="AddendumId">AddendumId.</param>
        /// <param name="BussinesName">BussinesName.</param>
        /// <param name="AssociateCertNumber">AssociateCertNumber.</param>
        /// <param name="BussinesStatus">BussinesStatus.</param>
        /// <param name="DeliveryChannel">DeliveryChannel.</param>
        /// <param name="RequieredReceiverCredentials">RequieredReceiverCredentials.</param>
        /// <param name="RequieredDocumentsToProcess">RequieredDocumentsToProcess.</param>
        /// <param name="RequieredImplementationProcess">RequieredImplementationProcess.</param>
        /// <param name="TaxRegime">TaxRegime.</param>
        public Agreements(long? AddendumId = null, string BussinesName = null, string AssociateCertNumber = null, string BussinesStatus = null, string DeliveryChannel = null, bool? RequieredReceiverCredentials = null, bool? RequieredDocumentsToProcess = null, bool? RequieredImplementationProcess = null, string TaxRegime = null)
        {
            this.AddendumId = AddendumId;
            this.BussinesName = BussinesName;
            this.AssociateCertNumber = AssociateCertNumber;
            this.BussinesStatus = BussinesStatus;
            this.DeliveryChannel = DeliveryChannel;
            this.RequieredReceiverCredentials = RequieredReceiverCredentials;
            this.RequieredDocumentsToProcess = RequieredDocumentsToProcess;
            this.RequieredImplementationProcess = RequieredImplementationProcess;
            this.TaxRegime = TaxRegime;
            
        }

        /// <summary>
        /// Gets or Sets AddendumId
        /// </summary>
        [DataMember(Name="addendumId")]
        public long? AddendumId { get; set; }

        /// <summary>
        /// Gets or Sets BussinesName
        /// </summary>
        [DataMember(Name="bussinesName")]
        public string BussinesName { get; set; }

        /// <summary>
        /// Gets or Sets AssociateCertNumber
        /// </summary>
        [DataMember(Name="associateCertNumber")]
        public string AssociateCertNumber { get; set; }

        /// <summary>
        /// Gets or Sets BussinesStatus
        /// </summary>
        [DataMember(Name="bussinesStatus")]
        public string BussinesStatus { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryChannel
        /// </summary>
        [DataMember(Name="deliveryChannel")]
        public string DeliveryChannel { get; set; }

        /// <summary>
        /// Gets or Sets RequieredReceiverCredentials
        /// </summary>
        [DataMember(Name="requieredReceiverCredentials")]
        public bool? RequieredReceiverCredentials { get; set; }

        /// <summary>
        /// Gets or Sets RequieredDocumentsToProcess
        /// </summary>
        [DataMember(Name="requieredDocumentsToProcess")]
        public bool? RequieredDocumentsToProcess { get; set; }

        /// <summary>
        /// Gets or Sets RequieredImplementationProcess
        /// </summary>
        [DataMember(Name="requieredImplementationProcess")]
        public bool? RequieredImplementationProcess { get; set; }

        /// <summary>
        /// Gets or Sets TaxRegime
        /// </summary>
        [DataMember(Name="taxRegime")]
        public string TaxRegime { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Agreements {\n");
            sb.Append("  AddendumId: ").Append(AddendumId).Append("\n");
            sb.Append("  BussinesName: ").Append(BussinesName).Append("\n");
            sb.Append("  AssociateCertNumber: ").Append(AssociateCertNumber).Append("\n");
            sb.Append("  BussinesStatus: ").Append(BussinesStatus).Append("\n");
            sb.Append("  DeliveryChannel: ").Append(DeliveryChannel).Append("\n");
            sb.Append("  RequieredReceiverCredentials: ").Append(RequieredReceiverCredentials).Append("\n");
            sb.Append("  RequieredDocumentsToProcess: ").Append(RequieredDocumentsToProcess).Append("\n");
            sb.Append("  RequieredImplementationProcess: ").Append(RequieredImplementationProcess).Append("\n");
            sb.Append("  TaxRegime: ").Append(TaxRegime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Agreements)obj);
        }

        /// <summary>
        /// Returns true if Agreements instances are equal
        /// </summary>
        /// <param name="other">Instance of Agreements to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Agreements other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.AddendumId == other.AddendumId ||
                    this.AddendumId != null &&
                    this.AddendumId.Equals(other.AddendumId)
                ) && 
                (
                    this.BussinesName == other.BussinesName ||
                    this.BussinesName != null &&
                    this.BussinesName.Equals(other.BussinesName)
                ) && 
                (
                    this.AssociateCertNumber == other.AssociateCertNumber ||
                    this.AssociateCertNumber != null &&
                    this.AssociateCertNumber.Equals(other.AssociateCertNumber)
                ) && 
                (
                    this.BussinesStatus == other.BussinesStatus ||
                    this.BussinesStatus != null &&
                    this.BussinesStatus.Equals(other.BussinesStatus)
                ) && 
                (
                    this.DeliveryChannel == other.DeliveryChannel ||
                    this.DeliveryChannel != null &&
                    this.DeliveryChannel.Equals(other.DeliveryChannel)
                ) && 
                (
                    this.RequieredReceiverCredentials == other.RequieredReceiverCredentials ||
                    this.RequieredReceiverCredentials != null &&
                    this.RequieredReceiverCredentials.Equals(other.RequieredReceiverCredentials)
                ) && 
                (
                    this.RequieredDocumentsToProcess == other.RequieredDocumentsToProcess ||
                    this.RequieredDocumentsToProcess != null &&
                    this.RequieredDocumentsToProcess.Equals(other.RequieredDocumentsToProcess)
                ) && 
                (
                    this.RequieredImplementationProcess == other.RequieredImplementationProcess ||
                    this.RequieredImplementationProcess != null &&
                    this.RequieredImplementationProcess.Equals(other.RequieredImplementationProcess)
                ) && 
                (
                    this.TaxRegime == other.TaxRegime ||
                    this.TaxRegime != null &&
                    this.TaxRegime.Equals(other.TaxRegime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AddendumId != null)
                    hash = hash * 59 + this.AddendumId.GetHashCode();
                if (this.BussinesName != null)
                    hash = hash * 59 + this.BussinesName.GetHashCode();
                if (this.AssociateCertNumber != null)
                    hash = hash * 59 + this.AssociateCertNumber.GetHashCode();
                if (this.BussinesStatus != null)
                    hash = hash * 59 + this.BussinesStatus.GetHashCode();
                if (this.DeliveryChannel != null)
                    hash = hash * 59 + this.DeliveryChannel.GetHashCode();
                if (this.RequieredReceiverCredentials != null)
                    hash = hash * 59 + this.RequieredReceiverCredentials.GetHashCode();
                if (this.RequieredDocumentsToProcess != null)
                    hash = hash * 59 + this.RequieredDocumentsToProcess.GetHashCode();
                if (this.RequieredImplementationProcess != null)
                    hash = hash * 59 + this.RequieredImplementationProcess.GetHashCode();
                if (this.TaxRegime != null)
                    hash = hash * 59 + this.TaxRegime.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Agreements left, Agreements right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Agreements left, Agreements right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
