/*
 * Carvajal Sigo-Facturizate
 *
 * Este es un ejemplo de como luciría la Api de Integración entre Facturizate y SIGO.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RelationShip :  IEquatable<RelationShip>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationShip" /> class.
        /// </summary>
        /// <param name="RelationshipId">Primary key for the relation.</param>
        /// <param name="RfcEmitter">References to RFC of Emitter..</param>
        /// <param name="RfcReceiver">References to RFC of Receiver..</param>
        /// <param name="Status">Status.</param>
        public RelationShip(long? RelationshipId = null, string RfcEmitter = null, string RfcReceiver = null, string Status = null)
        {
            this.RelationshipId = RelationshipId;
            this.RfcEmitter = RfcEmitter;
            this.RfcReceiver = RfcReceiver;
            this.Status = Status;
            
        }

        /// <summary>
        /// Primary key for the relation
        /// </summary>
        /// <value>Primary key for the relation</value>
        [DataMember(Name="RelationshipId")]
        public long? RelationshipId { get; set; }

        /// <summary>
        /// References to RFC of Emitter.
        /// </summary>
        /// <value>References to RFC of Emitter.</value>
        [DataMember(Name="RfcEmitter")]
        public string RfcEmitter { get; set; }

        /// <summary>
        /// References to RFC of Receiver.
        /// </summary>
        /// <value>References to RFC of Receiver.</value>
        [DataMember(Name="RfcReceiver")]
        public string RfcReceiver { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public string Status { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RelationShip {\n");
            sb.Append("  RelationshipId: ").Append(RelationshipId).Append("\n");
            sb.Append("  RfcEmitter: ").Append(RfcEmitter).Append("\n");
            sb.Append("  RfcReceiver: ").Append(RfcReceiver).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((RelationShip)obj);
        }

        /// <summary>
        /// Returns true if RelationShip instances are equal
        /// </summary>
        /// <param name="other">Instance of RelationShip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelationShip other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.RelationshipId == other.RelationshipId ||
                    this.RelationshipId != null &&
                    this.RelationshipId.Equals(other.RelationshipId)
                ) && 
                (
                    this.RfcEmitter == other.RfcEmitter ||
                    this.RfcEmitter != null &&
                    this.RfcEmitter.Equals(other.RfcEmitter)
                ) && 
                (
                    this.RfcReceiver == other.RfcReceiver ||
                    this.RfcReceiver != null &&
                    this.RfcReceiver.Equals(other.RfcReceiver)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RelationshipId != null)
                    hash = hash * 59 + this.RelationshipId.GetHashCode();
                if (this.RfcEmitter != null)
                    hash = hash * 59 + this.RfcEmitter.GetHashCode();
                if (this.RfcReceiver != null)
                    hash = hash * 59 + this.RfcReceiver.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(RelationShip left, RelationShip right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RelationShip left, RelationShip right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
